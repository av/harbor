services:
  dify-api:
    container_name: ${HARBOR_CONTAINER_PREFIX}.dify-api
    image: langgenius/dify-api:${HARBOR_DIFY_VERSION}
    env_file:
      - ./.env
      - ./dify/override.env
    environment:
      MODE: api
    depends_on:
      - dify-db
      - dify-redis
    volumes:
      - ${HARBOR_DIFY_VOLUMES}/app/storage:/app/api/storage
    networks:
      - harbor-network

  dify-worker:
    container_name: ${HARBOR_CONTAINER_PREFIX}.dify-worker
    image: langgenius/dify-api:${HARBOR_DIFY_VERSION}
    env_file:
      - ./.env
      - ./dify/override.env
    environment:
      MODE: worker
    depends_on:
      - dify-db
      - dify-redis
    volumes:
      - ${HARBOR_DIFY_VOLUMES}/app/storage:/app/api/storage
    networks:
      - harbor-network

  dify-web:
    container_name: ${HARBOR_CONTAINER_PREFIX}.dify-web
    image: langgenius/dify-web:${HARBOR_DIFY_VERSION}
    networks:
      - harbor-network
    env_file:
      - ./.env
      - ./dify/override.env

  dify-db:
    container_name: ${HARBOR_CONTAINER_PREFIX}.dify-db
    image: postgres:15-alpine
    env_file:
      - ./.env
      - ./dify/override.env
    volumes:
      - ${HARBOR_DIFY_VOLUMES}/db/data:/var/lib/postgresql/data/pgdata
    ports:
      - ${HARBOR_DIFY_DB_HOST_PORT}:5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - harbor-network

  dify-redis:
    container_name: ${HARBOR_CONTAINER_PREFIX}.dify-redis
    image: redis:6-alpine
    env_file:
      - ./.env
      - ./dify/override.env
    volumes:
      - ${HARBOR_DIFY_VOLUMES}/redis/data:/data
    command: redis-server --requirepass difyai123456
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
    networks:
      - harbor-network

  dify-sandbox:
    container_name: ${HARBOR_CONTAINER_PREFIX}.dify-sandbox
    image: langgenius/dify-sandbox:${HARBOR_DIFY_SANDBOX_VERSION}
    env_file:
      - ./.env
      - ./dify/override.env
    volumes:
      - ${HARBOR_DIFY_VOLUMES}/sandbox/dependencies:/dependencies
    networks:
      - harbor-network

  dify-ssrf:
    container_name: ${HARBOR_CONTAINER_PREFIX}.dify-ssrf
    image: ubuntu/squid:latest
    env_file:
      - ./.env
      - ./dify/override.env
    volumes:
      - ./dify/ssrf_proxy/squid.conf.template:/etc/squid/squid.conf.template
      - ./dify/ssrf_proxy/docker-entrypoint.sh:/docker-entrypoint-mount.sh
    entrypoint: [ "sh", "-c", "cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && sed -i 's/\r$$//' /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh" ]
    environment:
      HTTP_PORT: 3128
      COREDUMP_DIR: /var/spool/squid
      REVERSE_PROXY_PORT: 8194
      SANDBOX_HOST: dify-sandbox
      SANDBOX_PORT: 8194
    networks:
      - harbor-network

  dify-certbot:
    container_name: ${HARBOR_CONTAINER_PREFIX}.dify-certbot
    image: certbot/certbot
    env_file:
      - ./.env
      - ./dify/override.env
    volumes:
      - ${HARBOR_DIFY_VOLUMES}/certbot/conf:/etc/letsencrypt
      - ${HARBOR_DIFY_VOLUMES}/certbot/www:/var/www/html
      - ${HARBOR_DIFY_VOLUMES}/certbot/logs:/var/log/letsencrypt
      - ${HARBOR_DIFY_VOLUMES}/certbot/conf/live:/etc/letsencrypt/live
      - ./dify/certbot/update-cert.template.txt:/update-cert.template.txt
      - ./dify/certbot/docker-entrypoint.sh:/docker-entrypoint.sh
    entrypoint: [ "/docker-entrypoint.sh" ]
    command: ["tail", "-f", "/dev/null"]
    networks:
      - harbor-network

  dify:
    image: nginx:latest
    container_name: ${HARBOR_CONTAINER_PREFIX}.dify
    volumes:
      - ./dify/nginx/nginx.conf.template:/etc/nginx/nginx.conf.template
      - ./dify/nginx/proxy.conf.template:/etc/nginx/proxy.conf.template
      - ./dify/nginx/https.conf.template:/etc/nginx/https.conf.template
      - ./dify/nginx/conf.d:/etc/nginx/conf.d
      - ./dify/nginx/docker-entrypoint.sh:/docker-entrypoint-mount.sh
      - ./dify/nginx/ssl:/etc/ssl
      - ${HARBOR_DIFY_VOLUMES}/certbot/conf/live:/etc/letsencrypt/live
      - ${HARBOR_DIFY_VOLUMES}/certbot/conf:/etc/letsencrypt
      - ${HARBOR_DIFY_VOLUMES}/certbot/www:/var/www/html
    entrypoint: [ "sh", "-c", "cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && sed -i 's/\r$$//' /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh" ]
    env_file:
      - ./.env
      - ./dify/override.env
    depends_on:
      - dify-api
      - dify-web
    ports:
      - ${HARBOR_DIFY_HOST_PORT}:80
    networks:
      - harbor-network

  dify-weaviate:
    image: semitechnologies/weaviate:${HARBOR_DIFY_WEAVIATE_VERSION}
    container_name: ${HARBOR_CONTAINER_PREFIX}.dify-weaviate
    volumes:
      - ${HARBOR_DIFY_VOLUMES}/weaviate:/var/lib/weaviate
    env_file:
      - ./.env
      - ./dify/override.env
    networks:
      - harbor-network

  dify-openai:
    build:
      context: ./dify/openai
      dockerfile: Dockerfile
      network: host
    container_name: ${HARBOR_CONTAINER_PREFIX}.dify-openai
    ports:
      - ${HARBOR_DIFY_D2O_HOST_PORT}:3000
    env_file:
      - ./.env
      - ./dify/override.env
    volumes:
      - ./dify/openai/app.js:/dify2openai/app.js
    networks:
      - harbor-network
    environment:
      - DIFY_API_URL=http://harbor.dify:80
      - BOT_TYPE=${HARBOR_DIFY_BOT_TYPE}

